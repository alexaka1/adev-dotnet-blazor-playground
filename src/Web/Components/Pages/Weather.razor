@page "/weather"
@attribute [StreamRendering]
@inject IConfiguration Configuration

<PageTitle>Weather</PageTitle>

<h1 class="mb-4 text-3xl font-bold">Weather</h1>
<h2 class="mb-4 text-xl font-bold">I am using @RendererInfo.Name rendering mode</h2>
<h2 class="mb-4 text-xl font-bold">SomeConfig value is: <span class="font-semibold italic">@Configuration["SomeConfig"]</span></h2>

<p class="">This component demonstrates showing data.</p>

@if (_forecasts == null)
{
  <p class="italic">
    <em>Loading...</em>
  </p>
}
else
{
  <table class="w-full table-auto border-collapse text-left text-gray-800">
    <thead>
    <tr class="bg-gray-200">
      <th class="border-b px-4 py-2">Date</th>
      <th class="border-b px-4 py-2" aria-label="Temperature in Celsius">Temp. (C)</th>
      <th class="border-b px-4 py-2" aria-label="Temperature in Fahrenheit">Temp. (F)</th>
      <th class="border-b px-4 py-2">Summary</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in _forecasts)
    {
      <tr class="hover:bg-gray-100">
        <td class="border-b px-4 py-2">@forecast.Date.ToShortDateString()</td>
        <td class="border-b px-4 py-2">@forecast.TemperatureC</td>
        <td class="border-b px-4 py-2">@forecast.TemperatureF</td>
        <td class="border-b px-4 py-2">@forecast.Summary</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {
  private WeatherForecast[]? _forecasts;

  protected override async Task OnInitializedAsync()
  {
    // Simulate asynchronous loading to demonstrate streaming rendering
    await Task.Delay(500);

    var startDate = DateOnly.FromDateTime(DateTime.Now);
    string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];
    _forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
    {
      Date = startDate.AddDays(index),
      TemperatureC = Random.Shared.Next(-20, 55),
      Summary = summaries[Random.Shared.Next(summaries.Length)],
    }).ToArray();
  }

  private class WeatherForecast
  {
    public DateOnly Date { get; set; }
    public int TemperatureC { get; set; }
    public string? Summary { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }

}
